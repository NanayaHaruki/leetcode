class Solution {
    fun numWays(n: Int, relation: Array<IntArray>, k: Int): Int {
        // 遍历以便relation，保存每个人可以将信息传给谁
        // bfs一步步传，在第k次循环中找到n-1的次数
        val dict = mutableMapOf<Int, MutableSet<Int>>()
        relation.forEach { arr ->
            val set = dict.getOrDefault(arr[0], mutableSetOf())
            if (!set.contains(arr[1])) set.add(arr[1])
            dict[arr[0]] = set
        }

        val queue = LinkedList<Int>()
        queue.addAll(dict[0]?: emptySet())
        var ans = 0
        for(i in 1..k){
            val size = queue.size
            for(j in 0 until size){
                val first = queue.removeFirst()
                if (i == k && first == n-1){
                    ans++
                }else {
                    queue.addAll(dict[first]?: emptySet())
                }
            }
        }
        return ans
    }
}