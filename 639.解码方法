    fun numDecodings(s: String): Int {
        val mod = 1e9 + 7
        val n = s.length
        val dp = LongArray(n)
        dp[0] = when (s[0]) {
            '*' -> 9
            '0' -> 0
            else -> 1
        }
        // 每一位只考虑 自己的可能性 和 前一位组合的可能性；  与后面的组合，由后面的字符来判断
        for (i in 1 until n) {
            if (s[i] == '*') {
                // * 单独情况有9种可能性
                dp[i] = dp[i - 1] * 9

                // 组合，要找前面2项的次数 * 当前组合数
                val pre2 = if (i >= 2) dp[i - 2] else 1
                if (s[i - 1] == '*') {
                    // 11~19 21~26
                    dp[i] += pre2 * 15
                } else if (s[i - 1] == '1') {
                    // 可以组合11～19
                    dp[i] += pre2 * 9
                } else if (s[i - 1] == '2') {
                    // 组合 21～26
                    dp[i] += pre2 * 6
                }
            } else {
                // 当前是数字,单独自己只有一种可能性,可能就是前项*1,就没必要乘了..   X
                // 要考虑当前为0的情况，他自己是不能单独成立的
                val pre2 = if (i >= 2) dp[i - 2] else 1
                if (s[i - 1] == '*') {
                    // 前面是*,当前任何数字都能组合
                    when (s[i] - '0') {
                        0 -> dp[i] += pre2 * 2
                        in 1..6 -> {
                            dp[i] += dp[i - 1]  // 单独
                            dp[i] += pre2*2 // 组合
                        }
                        else->{
                            dp[i] += dp[i - 1]  // 单独
                            dp[i] += pre2 // 组合
                        }
                    }
                } else {
                    // 前面是数字
                        val cur = s[i]-'0'
                    val pre = s[i-1]-'0'
                    if (cur == 0) {
                        if (pre==1||pre == 2) {
                            dp[i]+= pre2
                        }
                    }else {
                        // 1～9
                        dp[i] += dp[i-1] // 单独
                        if (pre == 1) {
                            dp[i] += pre2
                        } else if (pre == 2) {
                            if (cur <= 6) {
                                dp[i] += pre2
                            }
                        }
                    }
                }
            }
            dp[i] = (dp[i] % mod).toLong()
        }
        return dp.last().toInt()
    }